#compdef zinit
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for zinit (https://github.com/zdharm-continuum/zinit.com/)
#
# ------------------------------------------------------------------------------
# Authors
# -------
#
#  * Vladislav Doster <mvdoster@gmail.com>
#
# ------------------------------------------------------------------------------

declare -g _zinit_run_cwd

# Commands [[[
_commands=(
  'cache:List or clean every cached package'
  'compile:Compile plugins'
  'config:Manages the zinit configuration files'
  'create:Creates new projects from any create-* starter kits'
  'delete:Clean and remove a plugin or snippet'
  'doctor:Show information about the installed tooling.'
  'help:Show information about a command'
  'info:Show information about a package'
  'create:Interactively creates or updates a package.json file'
  'install:Install all the dependencies listed within package.json'
  'module:manage binary Zsh module shipped with Zini'
  'reload:Restart the zsh process'
  'run:Run a defined package script'
  'uncompile:Remove compiled plugins'
  'versions:Display version information of currently installed zinit, Node.js, and its dependencies'
  'why:Show information about why a package is installed'
)

_global_commands=(
  'add:Installs a package and any packages that it depends on'
  'bin:Displays the location of the zinit bin folder'
  'list:List installed packages'
  'remove:Remove installed package'
  'update:Updates packages to their latest version'
)
# ;;
# Function: _zinit_find_package_json [[[
_zinit_find_package_json() {
  local dir=$(cd "$1" && pwd)

  while true
  do
    if [[ -e "${dir}/package.json" ]]; then
      echo "${dir}/package.json"
      return
    fi

    if [[ $dir == '/' ]]; then
      break
    fi

    dir=$(dirname $dir)
  done
} # ;;
# Function: _zinit_commands_scripts [[[
_zinit_commands_scripts() {
  local -a scripts binaries
  local packageJson

  if [[ -n $opt_args[--cwd] ]]; then
    packageJson=$(_zinit_find_package_json $opt_args[--cwd])
    binaries=($(cd $opt_args[--cwd] && echo node_modules/.bin/*(x:t)))
  else
    packageJson=$(_zinit_find_package_json $pwd)
    binaries=($(echo node_modules/.bin/*(x:t)))
  fi

  if [[ -n $packageJson ]]; then
    scripts=($(cat "$packageJson" | perl -0777 -MJSON::PP -n -E '$r=decode_json($_); do{($k=$_)=~s/:/\\:/g;say $k}for sort keys %{$r->{scripts}}'))
  fi

  _describe 'subcommands' _commands -- _global_commands -- scripts -- binaries
} # ;;
# Function: _zinit_scripts [[[
_zinit_scripts() {
  local -a binaries scripts
  local -a commands
  local packageJson

  if [[ -n $_zinit_run_cwd ]]; then
    packageJson=$(_zinit_find_package_json $_zinit_run_cwd)
    if [[ -d "${_zinit_run_cwd}/node_modules" ]]; then
      binaries=($(cd $_zinit_run_cwd && echo node_modules/.bin/*(x:t)))
    else
      binaries=($(cd $_zinit_run_cwd && zinit bin | perl -wln -e 'm{^[^:]+: (\S+)$} and print $1'))
    fi
  else
    packageJson=$(_zinit_find_package_json $pwd)
    if [[ -d node_modules ]]; then
      binaries=($(echo node_modules/.bin/*(x:t)))
    else
      binaries=($(zinit bin | perl -wln -e 'm{^[^:]+: (\S+)$} and print $1'))
    fi
  fi

  if [[ -n $packageJson ]]; then
    scripts=("${(@f)$(cat ${packageJson} | perl -0777 -MJSON::PP -n -E '%r=%{decode_json($_)->{scripts}}; do{$k=$_;($e=$k)=~s/:/\\:/g; printf "$e:$r{$k}\n"} for sort keys %r')}")
  fi

  commands=('env' $scripts $binaries)
  _describe 'command' commands
} # ;;
# Function: _zinit_global_commands [[[
_zinit_global_commands() {
  local -a cmds
  cmds=('ls:List installed packages')
  _describe 'command' _global_commands
} # ;;
# Function: _zinit_commands [[[
_zinit_commands() {
  _describe 'command' _commands -- _global_commands
} # ;;
# Function: _zinit_add_files [[[
_zinit_add_files() {
  if compset -P "(file|link):"; then
    _files
  fi
} # ;;
# Function: _zinit_workspaces [[[
_zinit_workspaces() {
  local version=$(zinit --version |sed -n 's|\([0-9]*\).*|\1|p')
  local -a workspaces
  if [[ $version == "1" ]]; then
    workspaces=(${(@f)$(zinit workspaces info |sed -n -e 's/^  "\([^"]*\)": {/\1/p')})
  else
    workspaces=(${(@f)$(zinit workspaces list --json | sed -n 's|.*"name":"\([^"]*\)"}|\1|p')})
  fi
  _describe 'workspace' workspaces
} # ;;

_zinit() {
  local context state state_descr line
  typeset -A opt_args

  _arguments \
    '(-h --help)'{-h,--help}'[output usage information]' \
    '(-V --version)'{-V,--version}'[output the version number]' \
    '--verbose[output verbose messages on internal operations]' \
    '1: :_zinit_commands_scripts' \
    '*:: :->command_args'


  case $state in
    command_args)
      case $words[1] in
        audit) # [[[
          _arguments \
            '--verbose[output verbose message]' \
            '--json[format zinit log messages as lines of JSON]' \
            '--level=[only print advisories with severity greater than or equal to]:level:(info low moderate high critical)' \
            '--groups=[only audit dependencies from listed groups]:groups:->groups_args'
          ;; # ]]]
        compile) # [[[
          _arguments -C \
            '(-a --all)'{-a,--all}'[compile all plugins]' \
            && ret=0
          ;;
        config) # [[[
          _arguments \
            '1: :(set get delete list)' \
            '*:: :->config_args'
          ;;
        delete) # [[[
          _arguments -C \
            '(-a --all)'{-a,--all}'[Delete all plugins and snippets]' \
            '(-c --clean)'{-c,--clean}'[Delete only the currently-not loaded plugins and snippets]' \
            '(-h --help)'{-h,--help}'[Print this usage information]' \
            '(-q --quiet)'{-q,--quiet}'[Do not show progress meter or error messages]' \
            '(-y --yes)'{-y,--yes}'[Automatically confirm any yes/no prompts]' \
            && ret=0
          ;;
        doctor) # [[[
          ret=0
          ;;
        help) # [[[
          return 0
          ;;
        info) # [[[
          _arguments \
            '1:package:' \
            '2:field'
          ;;
        create) # [[[
          _arguments \
            '(-y --yes)'{-y,--yes}'[install packages in devDependencies]' \
            '(-h --help)'{-h,--help}'[Print this usage information.]' \
            ;;
        link|unlink|outdated) # [[[
          _arguments \
            '1:package' \
            ;;
        list) # [[[
          _arguments \
            '--depth=[Limit the depth of the shown dependencies]:depth' \
            '--pattern=[filter the list of dependencies by the pattern]'
          ;;
        module) # [[[
          _arguments \
            '1: :(build info help)' \
            '*:: :->module_args'
          ;;
        reload) # [[[
          _arguments -C \
            '(-h --help)'{-h,--help}'[Print this usage information]' \
            && return 0
          ;;
        remove|update) # [[[
          _arguments \
            '(-f --force)'{-f,--force}'[Re-run hooks (e.g., atpull'', cp'', etc.)]' \
            '(-p --parallel)'{-p,--parallel}'[Makes curl perform updates in parallel as compared to the regular serial manner.]' \
            '--all[Update all plugins and snippets]' \
            '--plugins:' \
            '--quiet[Do not show progress meter or error messages.  Makes Zinit mute. It will still output the data you ask for, potentially even to the terminal/stdout unless you redirect it.]' \
            '--reset:' \
            '--snippets:' \
            '--verbose=[Makes curl verbose during the operation. Useful for debugging and seeing what is going on "under the hood".]' \
            '*:package:'
          ;;
        run) # [[[
          if [[ -n $opt_args[--cwd] ]]; then
            _zinit_run_cwd=$opt_args[--cwd]
          else
            _zinit_run_cwd=''
          fi
          _arguments \
            '1: :_zinit_scripts' \
            '*:: :_default'
          ;;
        uncompile) # [[[
          _arguments -C \
            '(-a --all)'{-a,--all}'[compile all plugins]' \
            && ret=0
          ;;
        update) # [[[
          _arguments \
            '(--ignore-workspace-root-check -W)'{--ignore-workspace-root-check,-W}'[allows a package to be installed at the workspaces root]' \
            '(-T --tilde)'{-T,--tilde}'[install the most recent release of the packages that have the same minor version]' \
            '(-a --all)'{-a,--all}'[compile all plugins]' \
            '--audit[checks for known security issues with the installed packages]' \
            '1: :_zinit_global_commands' \
            '*:: :->command_args'
          ;;
        version) # [[[
          _arguments \
            '--new-version[create a new version using an interactive session to prompt you]:version:' \
            '--major[creates a new version by incrementing the major version]' \
            '--minor[creates a new version by incrementing the minor version]' \
            '--patch[creates a new version by incrementing the patch version]' \
            '--premajor[creates a new prerelease version by incrementing the major version]' \
            '--preminor[creates a new prerelease version by incrementing the minor version]' \
            '--prepatch[creates a new prerelease version by incrementing the patch version]' \
            '--prerelease[increments the prerelease version number keeping the main version]' \
            '--no-git-tag-version[creates a new version without creating a git tag]' \
            '--no-commit-hooks[bypasses running commit hooks when committing the new version]'
          ;;
        *) # [[[
          _default
          ;;
      esac
      ;;
  esac

  case $state in
    cache_args) # [[[
      if [[ $words[1] == "list" ]]; then
        _arguments \
          '--pattern=[print out every cached package that matches the pattern]:pattern:'
      fi
      ;;
    config_args) # [[[
      case $words[1] in
        get|delete) # [[[
          _arguments \
            '1:key:'
          ;;
        set) # [[[
          _arguments \
            '(-g --global)'{-g,--global} \
            '1:key:' \
            '2:value:'
          ;;
      esac
      ;;
    groups_args) # [[[
      local dependency_groups=(devDependencies dependencies optionalDependencies peerDependencies bundledDependencies)
      _values -s ',' 'groups' $dependency_groups
      ;;
    module_args) # [[[
      case $words[1] in
        build) # [[[
          _arguments \
            '(-c --clean)'{-c,--clean}'[Run make distclean before installing]' \
            '(-l --link)'{-l,--link}'[Create symlink to Zinit Zsh module]' \
            ;;
        info) # [[[
          _arguments \
            '1:package:' \
            '2:tag:'
          ;;
        help) # [[[
          _arguments \
            '1:package:' \
            '2:tag:'
          ;;
      esac
      ;;
    owner_args) # [[[
      case $words[1] in
        ls) # [[[
          _arguments \
            '1:package:'
          ;;
        add|rm) # [[[
          _arguments \
            '1:user:' \
            '2:package:'
          ;;
      esac
      ;;
    team_args) # [[[
      case $words[1] in
        create|destroy|ls) # [[[
          _arguments \
            '1:scope\:team:'
          ;;
        add|rm) # [[[
          _arguments \
            '1:scope\:team:' \
            '2:user:'
          ;;
      esac
      ;;
  esac
}

_zinit "$@"

# vim:ft=zsh:sw=2:sts=2:et:
#foldmarker=[[[,;;:foldmethod=marker
