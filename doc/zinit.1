'\" t
.\" Automatically generated by Pandoc 2.19.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "" "" "" "" ""
.hy
.PP
\f[B]Table of Contents\f[R] \f[I]generated with
DocToc (https://github.com/thlorenz/doctoc)\f[R]
.IP \[bu] 2
Zinit
.RS 2
.IP \[bu] 2
Zinit Wiki
.IP \[bu] 2
Install
.RS 2
.IP \[bu] 2
Automatic
.IP \[bu] 2
Manual
.RE
.IP \[bu] 2
Usage
.RS 2
.IP \[bu] 2
Introduction
.IP \[bu] 2
Plugins and snippets
.IP \[bu] 2
Upgrade Zinit and plugins
.IP \[bu] 2
Turbo and lucid
.IP \[bu] 2
Migration
.RE
.IP \[bu] 2
Frequently Asked Questions
.RS 2
.IP \[bu] 2
Use \f[V]zi ice svn\f[R] if a plugin/snippet requires an entire
subdirectory
.IP \[bu] 2
Use \f[V]zi ice as\[aq]completion\[aq]\f[R] to directly add single file
completion snippets
.IP \[bu] 2
More Examples
.RE
.RE
.IP \[bu] 2
How to Use
.RS 2
.IP \[bu] 2
Ice Modifiers
.RS 2
.IP \[bu] 2
Cloning Options
.IP \[bu] 2
Selection of Files (To Source, \&...)
.IP \[bu] 2
Conditional Loading
.IP \[bu] 2
Plugin Output
.IP \[bu] 2
Completions
.IP \[bu] 2
Command Execution After Cloning, Updating or Loading
.IP \[bu] 2
Sticky-Emulation Of Other Shells
.IP \[bu] 2
Others
.IP \[bu] 2
Order of Execution
.RE
.IP \[bu] 2
Zinit Commands
.RS 2
.IP \[bu] 2
Help
.IP \[bu] 2
Loading and Unloading
.IP \[bu] 2
Completions
.IP \[bu] 2
Tracking of the Active Session
.IP \[bu] 2
Reports and Statistics
.IP \[bu] 2
Compiling
.IP \[bu] 2
Other
.RE
.IP \[bu] 2
Updating Zinit and Plugins
.IP \[bu] 2
Completions
.RS 2
.IP \[bu] 2
Calling \f[V]compinit\f[R] Without Turbo Mode
.IP \[bu] 2
Calling \f[V]compinit\f[R] With Turbo Mode
.IP \[bu] 2
Ignoring Compdefs
.IP \[bu] 2
Disabling System-Wide \f[V]compinit\f[R] Call (Ubuntu)
.RE
.IP \[bu] 2
Zinit Module
.IP \[bu] 2
Hints and Tips
.RS 2
.IP \[bu] 2
Customizing Paths
.IP \[bu] 2
Non-GitHub (Local) Plugins
.IP \[bu] 2
Extending Git
.IP \[bu] 2
Named directories for frequently used paths
.RE
.IP \[bu] 2
Changelog
.IP \[bu] 2
Support
.IP \[bu] 2
Getting Help and Community
.RE
.SH Zinit
.PP
[IMAGE: MIT License (https://img.shields.io/badge/license-MIT-blue.svg)]
[IMAGE: zinit
version (https://img.shields.io/github/tag/zdharma-continuum/zinit.svg)] (https://github.com/zdharma-continuum/zinit/releases)
[IMAGE: zunit
tests (https://github.com/zdharma-continuum/zinit/actions/workflows/tests.yaml/badge.svg)] (https://github.com/zdharma-continuum/zinit/actions/workflows/tests.yaml)
[IMAGE: Join the chat at
https://gitter.im/zdharma-continuum/zinit (https://badges.gitter.im/zdharma-continuum/zinit.svg)] (https://gitter.im/zdharma-continuum/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
.IP \[bu] 2
Zinit Wiki
.IP \[bu] 2
Install
.RS 2
.IP \[bu] 2
Automatic
.IP \[bu] 2
Manual
.RE
.IP \[bu] 2
Usage
.RS 2
.IP \[bu] 2
Introduction
.IP \[bu] 2
Plugins and snippets
.IP \[bu] 2
Upgrade Zinit and plugins
.IP \[bu] 2
Turbo and lucid
.IP \[bu] 2
Migration
.RE
.IP \[bu] 2
Frequently Asked Questions
.RS 2
.IP \[bu] 2
Use \f[V]zi ice svn\f[R] if a plugin/snippet requires an entire
subdirectory
.IP \[bu] 2
Use \f[V]zi ice as\[aq]completion\[aq]\f[R] to directly add single file
completion snippets
.IP \[bu] 2
More Examples
.RE
.IP \[bu] 2
Ice Modifiers
.RS 2
.IP \[bu] 2
Cloning Options
.IP \[bu] 2
Selection of Files (To Source, \&...)
.IP \[bu] 2
Conditional Loading
.IP \[bu] 2
Plugin Output
.IP \[bu] 2
Completions
.IP \[bu] 2
Command Execution After Cloning, Updating or Loading
.IP \[bu] 2
Sticky-Emulation Of Other Shells
.IP \[bu] 2
Others
.IP \[bu] 2
Order of Execution
.RE
.IP \[bu] 2
Zinit Commands
.RS 2
.IP \[bu] 2
Help
.IP \[bu] 2
Loading and Unloading
.IP \[bu] 2
Completions
.IP \[bu] 2
Tracking of the Active Session
.IP \[bu] 2
Reports and Statistics
.IP \[bu] 2
Compiling
.IP \[bu] 2
Other
.RE
.IP \[bu] 2
Updating Zinit and Plugins
.IP \[bu] 2
Completions
.RS 2
.IP \[bu] 2
Calling \f[V]compinit\f[R] Without Turbo Mode
.IP \[bu] 2
Calling \f[V]compinit\f[R] With Turbo Mode
.IP \[bu] 2
Ignoring Compdefs
.IP \[bu] 2
Disabling System-Wide \f[V]compinit\f[R] Call (Ubuntu)
.RE
.IP \[bu] 2
Zinit Module
.IP \[bu] 2
Hints and Tips
.RS 2
.IP \[bu] 2
Customizing Paths
.IP \[bu] 2
Non-GitHub (Local) Plugins
.IP \[bu] 2
Extending Git
.RE
.IP \[bu] 2
Changelog
.IP \[bu] 2
Support
.IP \[bu] 2
Getting Help and Community
.PP
Zinit is a flexible and fast Zshell plugin manager that will allow you
to install everything from GitHub and other sites.
Its characteristics are:
.IP "1." 3
Zinit is currently the only plugin manager that provides Turbo mode,
which yields \f[B]50-80% faster Zsh startup\f[R] (i.e., the shell will
start up to \f[B]5\f[R] times faster!).
Check out a speed comparison with other popular plugin managers
here (https://github.com/zdharma-continuum/pm-perf-test).
.IP "2." 3
The plugin manager gives \f[B]reports\f[R] from plugin loadings
describing what \f[B]aliases\f[R], functions, \f[B]bindkeys\f[R], Zle
widgets, zstyles, \f[B]completions\f[R], variables, \f[V]PATH\f[R] and
\f[V]FPATH\f[R] elements a plugin has set up.
This allows one to quickly familiarize oneself with a new plugin and
provides rich and easy-to-digest information which might be helpful on
various occasions.
.IP "3." 3
Supported is the unloading of plugin and ability to list, (un)install
and \f[B]selectively disable\f[R], \f[B]enable\f[R] plugin\[cq]s
completions.
.IP "4." 3
The plugin manager supports loading plugins and libraries from Oh My Zsh
or Prezto.
However, the implementation isn\[cq]t framework-specific and doesn\[cq]t
bloat the plugin manager with such code (more on this topic can be found
on the Wiki, in the
Introduction (https://zdharma-continuum.github.io/zinit/wiki/INTRODUCTION/#oh_my_zsh_prezto)).
.IP "5." 3
The system does not use \f[V]$FPATH\f[R], loading multiple plugins
doesn\[cq]t clutter \f[V]$FPATH\f[R] with the same number of entries
(e.g.\ \f[V]10\f[R], \f[V]15\f[R] or more).
Code is immune to \f[V]KSH_ARRAYS\f[R] and other options typically
causing compatibility problems.
.IP "6." 3
Zinit supports special, dedicated \f[B]packages\f[R] that offload the
user from providing long and complex commands.
See the zinit-packages
repository (https://github.com/zdharma-continuum/zinit-packages) for a
growing, complete list of Zinit packages and the Wiki
page (https://zdharma-continuum.github.io/zinit/wiki/Zinit-Packages/)
for an article about the feature.
.IP "7." 3
Also, specialized Zinit extensions \[em] called \f[B]annexes\f[R] \[em]
have the ability to extend the plugin manager with new commands,
URL-preprocessors (used by e.g.:
zinit-annex-readurl (https://github.com/zdharma-continuum/zinit-annex-readurl)
annex), post-install and post-update hooks, and much more.
See the zdharma-continuum (https://github.com/zdharma-continuum)
organization for a growing, complete list of available Zinit extensions
and refer to the Wiki
article (https://zdharma-continuum.github.io/zinit/wiki/Annexes/) for an
introduction on creating your annex.
.SS Zinit Wiki
.PP
The information in this README is complemented by the Zinit
Wiki (https://zdharma-continuum.github.io/zinit/wiki/).
The README is an introductory overview of Zinit, while the Wiki gives
complete information with examples.
Make sure to read it to get the most out of Zinit.
.SS Install
.SS Automatic
.PP
The easiest way to install Zinit is to execute:
.IP
.nf
\f[C]
bash -c \[dq]$(curl --fail --show-error --silent --location https://raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh)\[dq]
\f[R]
.fi
.PP
This will install Zinit in \f[V]\[ti]/.local/share/zinit/zinit.git\f[R].
\f[V].zshrc\f[R] will be updated with three lines of code that will be
added to the bottom.
The lines will be sourcing \f[V]zinit.zsh\f[R] and setting up completion
for command \f[V]zinit\f[R].
.PP
After installing and reloading the shell, compile Zinit via:
.IP
.nf
\f[C]
zinit self-update
\f[R]
.fi
.SS Manual
.PP
In your \f[V].zshrc\f[R], add the following snippet
.IP
.nf
\f[C]
ZINIT_HOME=\[dq]${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git\[dq]
mkdir -p \[dq]$(dirname $ZINIT_HOME)\[dq]
git clone https://github.com/zdharma-continuum/zinit.git \[dq]$ZINIT_HOME\[dq]
source \[dq]${ZINIT_HOME}/zinit.zsh\[dq]
\f[R]
.fi
.PP
compinit (http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Initialization)):
.PP
If you source \f[V]zinit.zsh\f[R] after \f[V]compinit\f[R], add the
following snippet after sourcing \f[V]zinit.zsh\f[R]:
.IP
.nf
\f[C]
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
\f[R]
.fi
.PP
Reload Zsh to install Zinit:
.IP
.nf
\f[C]
exec zsh
\f[R]
.fi
.PP
Various paths can be customized; see section Customizing Paths.
.SS Usage
.SS Introduction
.PP
Click here to read the introduction to
Zinit (https://zdharma-continuum.github.io/zinit/wiki/INTRODUCTION/).
It explains basic usage and some of the more unique features of Zinit,
such as the Turbo mode.
If you\[cq]re new to Zinit, we recommend you read it at least once.
.SS Plugins and snippets
.PP
Plugins can be loaded using \f[V]load\f[R] or \f[V]light\f[R].
.IP
.nf
\f[C]
zinit load  <repo/plugin> # Load with reporting/investigating.
zinit light <repo/plugin> # Load without reporting/investigating.
\f[R]
.fi
.PP
If you want to source local or remote files (using direct URL), you can
do so with \f[V]snippet\f[R].
.IP
.nf
\f[C]
zinit snippet <URL>
\f[R]
.fi
.PP
Such lines should be added to \f[V].zshrc\f[R].
Snippets are cached locally.
Use the \f[V]-f\f[R] option to download a new version of a snippet or
\f[V]zinit update {URL}\f[R].
You can also use \f[V]zinit update --all\f[R] to update all snippets
(and plugins).
.PP
\f[B]Example\f[R]
.IP
.nf
\f[C]
# Plugin history-search-multi-word loaded with investigating.
zinit load zdharma-continuum/history-search-multi-word

# Two regular plugins loaded without investigating.
zinit light zsh-users/zsh-autosuggestions
zinit light zdharma-continuum/fast-syntax-highlighting

# Snippet
zinit snippet https://gist.githubusercontent.com/hightemp/5071909/raw/
\f[R]
.fi
.PP
\f[B]Prompt(Theme) Example\f[R]
.PP
This is powerlevel10k (https://github.com/romkatv/powerlevel10k),
pure (https://github.com/sindresorhus/pure),
starship (https://github.com/starship/starship) sample:
.IP
.nf
\f[C]
# Load powerlevel10k theme
zinit ice depth\[dq]1\[dq] # git clone depth
zinit light romkatv/powerlevel10k

# Load pure theme
zinit ice pick\[dq]async.zsh\[dq] src\[dq]pure.zsh\[dq] # with zsh-async library that\[aq]s bundled with it.
zinit light sindresorhus/pure

# Load starship theme
zinit ice as\[dq]command\[dq] from\[dq]gh-r\[dq] \[rs] # \[ga]starship\[ga] binary as command, from github release
          atclone\[dq]./starship init zsh > init.zsh; ./starship completions zsh > _starship\[dq] \[rs] # starship setup at clone(create init.zsh, completion)
          atpull\[dq]%atclone\[dq] src\[dq]init.zsh\[dq] # pull behavior same as clone, source init.zsh
zinit light starship/starship
\f[R]
.fi
.SS Upgrade Zinit and plugins
.PP
Zinit can be updated to \f[V]self-update\f[R] and plugins to
\f[V]update\f[R].
.IP
.nf
\f[C]
# Self update
zinit self-update

# Plugin update
zinit update

# Plugin parallel update
zinit update --parallel

# Increase the number of jobs in a concurrent-set to 40
zinit update --parallel 40
\f[R]
.fi
.SS Turbo and lucid
.PP
Turbo and lucid are the most used options.
Turbo Mode
.PP
Turbo mode is the key to performance.
It can be loaded asynchronously, which makes a huge difference when the
amount of plugins increases.
.PP
Usually used as \f[V]zinit ice wait\[dq]<SECONDS>\[dq]\f[R], let\[cq]s
use the previous example:
.IP
.nf
\f[C]
zinit ice wait    # wait is the same as wait\[dq]0\[dq]
zinit load zdharma-continuum/history-search-multi-word

zinit ice wait\[dq]2\[dq] # load after 2 seconds
zinit load zdharma-continuum/history-search-multi-word

zinit ice wait    # also be used in \[ga]light\[ga] and \[ga]snippet\[ga]
zinit snippet https://gist.githubusercontent.com/hightemp/5071909/raw/
\f[R]
.fi
Lucid
.PP
Turbo mode is verbose, so you need an option for quiet.
.PP
You can use \f[V]lucid\f[R]:
.IP
.nf
\f[C]
zinit ice wait lucid
zinit load zdharma-continuum/history-search-multi-word
\f[R]
.fi
.PP
\f[B]\f[BI]F&A:\f[B]\f[R] What is \f[V]ice\f[R]?
.PP
\f[V]ice\f[R] is zinit\[cq]s options command.
The option melts like ice and is used only once.
(more: Ice Modifiers)
.SS Migration
Migration from Oh-My-ZSH
.PP
\f[B]Basic\f[R]
.IP
.nf
\f[C]
zinit snippet <URL>        # Raw Syntax with URL
zinit snippet OMZ::<PATH>  # Shorthand OMZ/ (https://github.com/ohmyzsh/ohmyzsh/raw/master/)
zinit snippet OMZL::<PATH> # Shorthand OMZ/lib/
zinit snippet OMZT::<PATH> # Shorthand OMZ/themes/
zinit snippet OMZP::<PATH> # Shorthand OMZ/plugins/
\f[R]
.fi
.PP
\f[B]Library\f[R]
.PP
Importing the
clipboard (https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/clipboard.zsh)
and
termsupport (https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/termsupport.zsh)
Oh-My-Zsh Library Sample:
.IP
.nf
\f[C]
# Raw Syntax
zi snippet https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/clipboard.zsh
zi snippet https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/termsupport.zsh

# OMZ Shorthand Syntax
zi snippet OMZ::lib/clipboard.zsh
zi snippet OMZ::lib/termsupport.zsh

# OMZL Shorthand Syntax
zi snippet OMZL::clipboard.zsh
zi snippet OMZL::termsupport.zsh
\f[R]
.fi
.PP
\f[B]Theme\f[R]
.PP
To use \f[B]themes\f[R] created for Oh My Zsh you might want to first
source the \f[V]git\f[R] library there.
.PP
Then you can use the themes as snippets
(\f[V]zinit snippet <file path or GitHub URL>\f[R]).
Some themes require not only Oh My Zsh\[cq]s Git \f[B]library\f[R], but
also Git \f[B]plugin\f[R] (error about \f[V]current_branch\f[R] may
appear).
Load this Git-plugin as single-file snippet directly from OMZ.
.PP
Most themes require \f[V]promptsubst\f[R] option
(\f[V]setopt promptsubst\f[R] in \f[V]zshrc\f[R]), if it isn\[cq]t set,
then prompt will appear as something like:
\f[V]... $(build_prompt) ...\f[R].
.PP
You might want to suppress completions provided by the git plugin by
issuing \f[V]zinit cdclear -q\f[R] (\f[V]-q\f[R] is for quiet) \[en] see
below \f[B]Ignoring Compdefs\f[R].
.PP
To summarize:
.IP
.nf
\f[C]
## Oh My Zsh Setting
ZSH_THEME=\[dq]robbyrussell\[dq]

## Zinit Setting
# Must Load OMZ Git library
zi snippet OMZL::git.zsh

# Load Git plugin from OMZ
zi snippet OMZP::git
zi cdclear -q # <- forget completions provided up to this moment

setopt promptsubst

# Load Prompt
zi snippet OMZT::robbyrussell
\f[R]
.fi
.PP
External Theme Sample:
NicoSantangelo/Alpharized (https://github.com/nicosantangelo/Alpharized)
.IP
.nf
\f[C]
## Oh My Zsh Setting
ZSH_THEME=\[dq]alpharized\[dq]

## Zinit Setting
# Must Load OMZ Git library
zi snippet OMZL::git.zsh

# Load Git plugin from OMZ
zi snippet OMZP::git
zi cdclear -q # <- forget completions provided up to this moment

setopt promptsubst

# Load Prompt
zi light NicoSantangelo/Alpharized
\f[R]
.fi
.SS Frequently Asked Questions
.PP
Error occurs when loading OMZ\[cq]s theme.
.PP
If the \f[V]git\f[R] library will not be loaded, the following errors
will appear:
.IP
.nf
\f[C]
\&........:1: command not found: git_prompt_status
\&........:1: command not found: git_prompt_short_sha
\f[R]
.fi
.PP
\f[B]Plugin\f[R]
.PP
If it consists of a single file, you can just load it.
.IP
.nf
\f[C]
## Oh-My-Zsh Setting
plugins=(
  git
  dotenv
  rake
  rbenv
  ruby
)

## Zinit Setting
zi snippet OMZP::git
zi snippet OMZP::dotenv
zi snippet OMZP::rake
zi snippet OMZP::rbenv
zi snippet OMZP::ruby
\f[R]
.fi
.SS Use \f[V]zi ice svn\f[R] if a plugin/snippet requires an entire subdirectory
.IP "1." 3
gitfast (https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gitfast)
.IP "2." 3
osx (https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/osx)
.IP
.nf
\f[C]
zi ice svn
zi snippet OMZP::gitfast

zi ice svn
zi snippet OMZP::osx
\f[R]
.fi
.SS Use \f[V]zi ice as\[aq]completion\[aq]\f[R] to directly add single file completion snippets
.IP "1." 3
docker (https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/docker)
.IP "2." 3
fd (https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/fd)
.IP
.nf
\f[C]
zi ice as\[dq]completion\[dq]
zi snippet OMZP::docker/_docker

zi ice as\[dq]completion\[dq]
zi snippet OMZP::fd/_fd
\f[R]
.fi
.PP
Find more information on Oh-My-Zsh + Zinit on the
Wiki (https://zdharma-continuum.github.io/zinit/wiki/Example-Oh-My-Zsh-setup/)
Migration from Prezto
.PP
\f[B]Basic\f[R]
.IP
.nf
\f[C]
zi snippet <URL>        # Raw Syntax with URL
zi snippet PZT::<PATH>  # Shorthand PZT/ (https://github.com/sorin-ionescu/prezto/tree/master/)
zi snippet PZTM::<PATH> # Shorthand PZT/modules/
\f[R]
.fi
.PP
\f[B]Modules\f[R]
.PP
Importing the
environment (https://github.com/sorin-ionescu/prezto/tree/master/modules/environment)
and
terminal (https://github.com/sorin-ionescu/prezto/tree/master/modules/terminal)
Prezto Modules Sample:
.IP
.nf
\f[C]
## Prezto Setting
zstyle \[aq]:prezto:load\[aq] pmodule \[aq]environment\[aq] \[aq]terminal\[aq]

## Zinit Setting
# Raw Syntax
zi snippet https://github.com/sorin-ionescu/prezto/blob/master/modules/environment/init.zsh
zi snippet https://github.com/sorin-ionescu/prezto/blob/master/modules/terminal/init.zsh

# PZT Shorthand Syntax
zi snippet PZT::modules/environment
zi snippet PZT::modules/terminal

# PZTM Shorthand Syntax
zi snippet PZTM::environment
zi snippet PZTM::terminal
\f[R]
.fi
.PP
Use \f[V]zinit ice svn\f[R] if multiple files require an entire
subdirectory.
Like
docker (https://github.com/sorin-ionescu/prezto/tree/master/modules/docker),
git (https://github.com/sorin-ionescu/prezto/tree/master/modules/git):
.IP
.nf
\f[C]
zi ice svn
zi snippet PZTM::docker

zi ice svn
zi snippet PZTM::git
\f[R]
.fi
.PP
Use \f[V]zinit ice as\[dq]null\[dq]\f[R] if don\[cq]t exist
\f[V]*.plugin.zsh\f[R], \f[V]init.zsh\f[R], \f[V]*.zsh-theme*\f[R] files
in module.
Like
archive (https://github.com/sorin-ionescu/prezto/tree/master/modules/archive):
.IP
.nf
\f[C]
zi ice svn as\[dq]null\[dq]
zi snippet PZTM::archive
\f[R]
.fi
.PP
Use \f[V]zinit ice atclone\[dq]git clone <repo> <location>\[dq]\f[R] if
module have external module.
Like
completion (https://github.com/sorin-ionescu/prezto/tree/master/modules/completion):
.IP
.nf
\f[C]
zi ice \[rs]
  atclone\[dq]git clone --recursive https://github.com/zsh-users/zsh-completions.git external\[dq] \[rs]
  blockf \[rs] # use blockf to prevent any unnecessary additions to fpath, as zinit manages fpath
  svn

zi snippet PZTM::completion
\f[R]
.fi
.PP
\f[B]\f[BI]F&A:\f[B]\f[R] What is \f[V]zstyle\f[R]?
.PP
Read
zstyle (http://zsh.sourceforge.net/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module)
doc (more: What does \f[V]zstyle\f[R]
do? (https://unix.stackexchange.com/questions/214657/what-does-zstyle-do)).
Migration from Zgen
.PP
\f[B]Oh My Zsh\f[R]
.PP
More reference: check \f[B]Migration from Oh-My-ZSH\f[R]
.IP
.nf
\f[C]
# Load ohmyzsh base
zgen oh-my-zsh
zi snippet OMZL::<ALL OF THEM>

# Load ohmyzsh plugins
zgen oh-my-zsh <PATH>
zi snippet OMZ::<PATH>
\f[R]
.fi
.PP
\f[B]Prezto\f[R]
.PP
More reference: check \f[B]Migration from Prezto\f[R]
.IP
.nf
\f[C]
# Load Prezto
zgen prezto
zi snippet PZTM::<COMMENT\[aq]s List> # environment terminal editor history directory spectrum utility completion prompt

# Load prezto plugins
zgen prezto <modulename>
zi snippet PZTM::<modulename>

# Load a repo as Prezto plugins
zgen pmodule <reponame> <branch>
zi ice ver\[dq]<branch>\[dq]
zi load <repo/plugin>

# Set prezto options
zgen prezto <modulename> <option> <value(s)>
zstyle \[aq]:prezto:<modulename>:\[aq] <option> <values(s)> # Set original prezto style
\f[R]
.fi
.PP
\f[B]General\f[R]
.PP
\f[V]location\f[R]: refer Selection of Files
.IP
.nf
\f[C]
zgen load <repo> [location] [branch]

zi ice ver\[dq][branch]\[dq]
zi load <repo>
\f[R]
.fi
Migration from Zplug
.PP
\f[B]Basic\f[R]
.IP
.nf
\f[C]
zplug <repo/plugin>, tag1:<option1>, tag2:<option2>

zi ice tag1\[dq]<option1>\[dq] tag2\[dq]<option2>\[dq]
zi load <repo/plugin>
\f[R]
.fi
.PP
\f[B]Tag comparison\f[R]
.IP \[bu] 2
\f[V]as\f[R] => \f[V]as\f[R]
.IP \[bu] 2
\f[V]use\f[R] => \f[V]pick\f[R], \f[V]src\f[R], \f[V]multisrc\f[R]
.IP \[bu] 2
\f[V]ignore\f[R] => None
.IP \[bu] 2
\f[V]from\f[R] => \f[V]from\f[R]
.IP \[bu] 2
\f[V]at\f[R] => \f[V]ver\f[R]
.IP \[bu] 2
\f[V]rename-to\f[R] => \f[V]mv\f[R], \f[V]cp\f[R]
.IP \[bu] 2
\f[V]dir\f[R] => Selection(\f[V]pick\f[R], \&...)
with rename
.IP \[bu] 2
\f[V]if\f[R] => \f[V]if\f[R]
.IP \[bu] 2
\f[V]hook-build\f[R] => \f[V]atclone\f[R], \f[V]atpull\f[R]
.IP \[bu] 2
\f[V]hook-load\f[R] => \f[V]atload\f[R]
.IP \[bu] 2
\f[V]frozen\f[R] => None
.IP \[bu] 2
\f[V]on\f[R] => None
.IP \[bu] 2
\f[V]defer\f[R] => \f[V]wait\f[R]
.IP \[bu] 2
\f[V]lazy\f[R] => \f[V]autoload\f[R]
.IP \[bu] 2
\f[V]depth\f[R] => \f[V]depth\f[R]
.SS More Examples
.PP
After installing Zinit you can start adding some actions (load some
plugins) to \f[V]\[ti]/.zshrc\f[R], at bottom.
Some examples:
.IP
.nf
\f[C]
# Load the pure theme, with zsh-async library that\[aq]s bundled with it.
zi ice pick\[dq]async.zsh\[dq] src\[dq]pure.zsh\[dq]
zi light sindresorhus/pure

# A glance at the new for-syntax \[en] load all of the above
# plugins with a single command. For more information see:
# https://zdharma-continuum.github.io/zinit/wiki/For-Syntax/
zinit for \[rs]
    light-mode \[rs]
  zsh-users/zsh-autosuggestions \[rs]
    light-mode \[rs]
  zdharma-continuum/fast-syntax-highlighting \[rs]
  zdharma-continuum/history-search-multi-word \[rs]
    light-mode \[rs]
    pick\[dq]async.zsh\[dq] \[rs]
    src\[dq]pure.zsh\[dq] \[rs]
  sindresorhus/pure

# Binary release in archive, from GitHub-releases page.
# After automatic unpacking it provides program \[dq]fzf\[dq].
zi ice from\[dq]gh-r\[dq] as\[dq]program\[dq]
zi light junegunn/fzf

# One other binary release, it needs renaming from \[ga]docker-compose-Linux-x86_64\[ga].
# This is done by ice-mod \[ga]mv\[aq]{from} -> {to}\[aq]. There are multiple packages per
# single version, for OS X, Linux and Windows \[en] so ice-mod \[ga]bpick\[aq] is used to
# select Linux package \[en]\ in this case this is actually not needed, Zinit will
# grep operating system name and architecture automatically when there\[aq]s no \[ga]bpick\[aq].
zi ice from\[dq]gh-r\[dq] as\[dq]program\[dq] mv\[dq]docker* -> docker-compose\[dq] bpick\[dq]*linux*\[dq]
zi load docker/compose

# Vim repository on GitHub \[en] a typical source code that needs compilation \[en] Zinit
# can manage it for you if you like, run \[ga]./configure\[ga] and other \[ga]make\[ga], etc.
# Ice-mod \[ga]pick\[ga] selects a binary program to add to $PATH. You could also install the
# package under the path $ZPFX, see: https://zdharma-continuum.github.io/zinit/wiki/Compiling-programs
zi ice \[rs]
  as\[dq]program\[dq] \[rs]
  atclone\[dq]rm -f src/auto/config.cache; ./configure\[dq] \[rs]
  atpull\[dq]%atclone\[dq] \[rs]
  make \[rs]
  pick\[dq]src/vim\[dq]
zi light vim/vim

# Scripts built at install (there\[aq]s single default make target, \[dq]install\[dq],
# and it constructs scripts by \[ga]cat\[aq]ing a few files). The make\[aq]\[aq] ice could also be:
# \[ga]make\[dq]install PREFIX=$ZPFX\[dq]\[ga], if \[dq]install\[dq] wouldn\[aq]t be the only default target.
zi ice as\[dq]program\[dq] pick\[dq]$ZPFX/bin/git-*\[dq] make\[dq]PREFIX=$ZPFX\[dq]
zi light tj/git-extras

# Handle completions without loading any plugin; see \[dq]clist\[dq] command.
# This one is to be ran just once, in interactive session.
zi creinstall %HOME/my_completions
\f[R]
.fi
.IP
.nf
\f[C]
# For GNU ls (the binaries can be gls, gdircolors, e.g. on OS X when installing the
# coreutils package from Homebrew; you can also use https://github.com/ogham/exa)
zi ice atclone\[dq]dircolors -b LS_COLORS > c.zsh\[dq] atpull\[aq]%atclone\[aq] pick\[dq]c.zsh\[dq] nocompile\[aq]!\[aq]
zi light trapd00r/LS_COLORS
\f[R]
.fi
.PP
You can see an extended explanation of LS_COLORS in the
Wiki. (https://zdharma-continuum.github.io/zinit/wiki/LS_COLORS-explanation/)
.IP
.nf
\f[C]
# make\[aq]!...\[aq] -> run make before atclone & atpull
zi ice as\[dq]program\[dq] make\[aq]!\[aq] atclone\[aq]./direnv hook zsh > zhook.zsh\[aq] atpull\[aq]%atclone\[aq] src\[dq]zhook.zsh\[dq]
zi light direnv/direnv
\f[R]
.fi
.PP
You can see an extended explanation of direnv in the
Wiki. (https://zdharma-continuum.github.io/zinit/wiki/Direnv-explanation/)
.PP
If you\[cq]re interested in more examples, then check out the
zinit-configs
repository (https://github.com/zdharma-continuum/zinit-configs), where
users have uploaded their \f[V]\[ti]/.zshrc\f[R] and Zinit
configurations.
Feel free to
submit (https://github.com/zdharma-continuum/zinit-configs/issues/new?template=request-to-add-zshrc-to-the-zinit-configs-repo.md)
your \f[V]\[ti]/.zshrc\f[R] there if it contains Zinit commands.
.PP
You can also check out the Gallery of Zinit
Invocations (https://zdharma-continuum.github.io/zinit/wiki/GALLERY/)
for some additional examples.
.PP
Also, two articles on the Wiki present an example setup
here (https://zdharma-continuum.github.io/zinit/wiki/Example-Minimal-Setup/)
and
here (https://zdharma-continuum.github.io/zinit/wiki/Example-Oh-My-Zsh-setup/).
.SH How to Use
.SS Ice Modifiers
.PP
Following \f[V]ice\f[R] modifiers are to be
passed (https://zdharma-continuum.github.io/zinit/wiki/Alternate-Ice-Syntax/)
to \f[V]zinit ice ...\f[R] to obtain described effects.
The word \f[V]ice\f[R] means something that\[cq]s added (like ice to a
drink) \[en] and in Zinit it means adding modifier to a next
\f[V]zinit\f[R] command, and also something that\[cq]s temporary because
it melts \[en] and this means that the modification will last only for a
\f[B]single\f[R] next \f[V]zinit\f[R] command.
.PP
Some Ice-modifiers are highlighted and clicking on them will take you to
the appropriate Wiki page for an extended explanation.
.PP
You may safely assume a given ice works with both plugins and snippets
unless explicitly stated otherwise.
.SS Cloning Options
.PP
.TS
tab(@);
cw(12.2n) lw(57.8n).
T{
Modifier
T}@T{
Description
T}
_
T{
\f[V]proto\f[R]
T}@T{
T}
T{
\f[B]\f[VB]from\f[B]\f[R] (https://zdharma-continuum.github.io/zinit/wiki/Private-Repositories/)
T}@T{
T}
T{
\f[V]ver\f[R]
T}@T{
T}
T{
\f[V]bpick\f[R]
T}@T{
T}
T{
\f[V]depth\f[R]
T}@T{
T}
T{
\f[V]cloneopts\f[R]
T}@T{
T}
T{
\f[V]pullopts\f[R]
T}@T{
T}
T{
\f[V]svn\f[R]
T}@T{
T}
.TE
.SS Selection of Files (To Source, \&...)
.PP
.TS
tab(@);
cw(16.3n) lw(53.7n).
T{
Modifier
T}@T{
Description
T}
_
T{
\f[B]\f[VB]pick\f[B]\f[R] (https://zdharma-continuum.github.io/zinit/wiki/Sourcing-multiple-files/)
T}@T{
T}
T{
\f[B]\f[VB]src\f[B]\f[R] (https://zdharma-continuum.github.io/zinit/wiki/Sourcing-multiple-files)
T}@T{
T}
T{
\f[B]\f[VB]multisrc\f[B]\f[R] (https://zdharma-continuum.github.io/zinit/wiki/Sourcing-multiple-files)
T}@T{
T}
.TE
.SS Conditional Loading
.PP
.TS
tab(@);
cw(11.8n) lw(58.2n).
T{
Modifier
T}@T{
Description
T}
_
T{
\f[B]\f[VB]wait\f[B]\f[R] (https://zdharma-continuum.github.io/zinit/wiki/Example-wait-conditions)
T}@T{
T}
T{
\f[B]\f[VB]load\f[B]\f[R] (https://zdharma-continuum.github.io/zinit/wiki/Multiple-prompts)
T}@T{
T}
T{
\f[B]\f[VB]unload\f[B]\f[R] (https://zdharma-continuum.github.io/zinit/wiki/Multiple-prompts)
T}@T{
T}
T{
\f[V]cloneonly\f[R]
T}@T{
T}
T{
\f[V]if\f[R]
T}@T{
T}
T{
\f[V]has\f[R]
T}@T{
T}
T{
\f[V]subscribe\f[R] / \f[V]on-update-of\f[R]
T}@T{
T}
T{
\f[V]trigger-load\f[R]
T}@T{
T}
.TE
.SS Plugin Output
.PP
.TS
tab(@);
cw(1.5n) lw(68.5n).
T{
Modifier
T}@T{
Description
T}
_
T{
\f[V]silent\f[R]
T}@T{
T}
T{
\f[V]lucid\f[R]
T}@T{
T}
T{
\f[V]notify\f[R]
T}@T{
T}
.TE
.SS Completions
.PP
.TS
tab(@);
cw(4.2n) lw(65.8n).
T{
Modifier
T}@T{
Description
T}
_
T{
\f[V]blockf\f[R]
T}@T{
T}
T{
\f[V]nocompletions\f[R]
T}@T{
T}
.TE
.SS Command Execution After Cloning, Updating or Loading
.PP
.TS
tab(@);
cw(10.3n) lw(59.7n).
T{
Modifier
T}@T{
Description
T}
_
T{
\f[V]mv\f[R]
T}@T{
T}
T{
\f[V]cp\f[R]
T}@T{
T}
T{
\f[B]\f[VB]atclone\f[B]\f[R] (https://zdharma-continuum.github.io/zinit/wiki/atload-and-other-at-ices)
T}@T{
T}
T{
\f[B]\f[VB]atpull\f[B]\f[R] (https://zdharma-continuum.github.io/zinit/wiki/atload-and-other-at-ices)
T}@T{
T}
T{
\f[B]\f[VB]atinit\f[B]\f[R] (https://zdharma-continuum.github.io/zinit/wiki/atload-and-other-at-ices)
T}@T{
T}
T{
\f[B]\f[VB]atload\f[B]\f[R] (https://zdharma-continuum.github.io/zinit/wiki/atload-and-other-at-ices)
T}@T{
T}
T{
\f[V]run-atpull\f[R]
T}@T{
T}
T{
\f[V]nocd\f[R]
T}@T{
T}
T{
\f[V]configure\f[R]
T}@T{
T}
T{
\f[B]\f[VB]make\f[B]\f[R] (https://zdharma-continuum.github.io/zinit/wiki/Installing-with-make)
T}@T{
T}
T{
\f[V]countdown\f[R]
T}@T{
T}
T{
\f[V]reset\f[R]
T}@T{
T}
.TE
.SS Sticky-Emulation Of Other Shells
.PP
.TS
tab(@);
cw(2.6n) lw(67.4n).
T{
Modifier
T}@T{
Description
T}
_
T{
\f[V]sh\f[R], \f[V]!sh\f[R]
T}@T{
T}
T{
\f[V]bash\f[R], \f[V]!bash\f[R]
T}@T{
T}
T{
\f[V]ksh\f[R], \f[V]!ksh\f[R]
T}@T{
T}
T{
\f[V]csh\f[R], \f[V]!csh\f[R]
T}@T{
T}
.TE
.SS Others
.PP
.TS
tab(@);
cw(7.0n) lw(63.0n).
T{
Modifier
T}@T{
Description
T}
_
T{
\f[V]as\f[R]
T}@T{
T}
T{
\f[B]\f[VB]id-as\f[B]\f[R] (https://zdharma-continuum.github.io/zinit/wiki/id-as/)
T}@T{
T}
T{
\f[V]compile\f[R]
T}@T{
T}
T{
\f[V]nocompile\f[R]
T}@T{
T}
T{
\f[V]service\f[R]
T}@T{
T}
T{
\f[V]reset-prompt\f[R]
T}@T{
T}
T{
\f[V]bindmap\f[R]
T}@T{
T}
T{
\f[V]trackbinds\f[R]
T}@T{
T}
T{
\f[B]\f[VB]wrap-track\f[B]\f[R] (https://zdharma-continuum.github.io/zinit/wiki/wrap-track)
T}@T{
T}
T{
\f[V]aliases\f[R]
T}@T{
T}
T{
\f[V]light-mode\f[R]
T}@T{
T}
T{
\f[B]\f[VB]extract\f[B]\f[R] (https://zdharma-continuum.github.io/zinit/wiki/extract-Ice/)
T}@T{
T}
T{
\f[V]subst\f[R]
T}@T{
T}
T{
\f[V]autoload\f[R]
T}@T{
T}
T{
\f[V]link\f[R]
T}@T{
T}
.TE
.SS Order of Execution
.PP
Order of execution of related Ice-mods: \f[V]atinit\f[R] ->
\f[V]atpull!\f[R] -> \f[V]make\[aq]!!\[aq]\f[R] -> \f[V]mv\f[R] ->
\f[V]cp\f[R] -> \f[V]make!\f[R] -> \f[V]atclone\f[R]/\f[V]atpull\f[R] ->
\f[V]make\f[R] -> \f[V](plugin script loading)\f[R] -> \f[V]src\f[R] ->
\f[V]multisrc\f[R] -> \f[V]atload\f[R].
.SS Zinit Commands
.PP
Following commands are passed to \f[V]zinit ...\f[R] to obtain described
effects.
.SS Help
.PP
.TS
tab(@);
cw(13.5n) lw(56.5n).
T{
Command
T}@T{
Description
T}
_
T{
\f[V]-h, --help, help\f[R]
T}@T{
T}
T{
\f[V]man\f[R]
T}@T{
T}
.TE
.SS Loading and Unloading
.PP
.TS
tab(@);
cw(4.3n) lw(65.7n).
T{
Command
T}@T{
Description
T}
_
T{
\f[V]load {plg-spec}\f[R]
T}@T{
T}
T{
\f[V]light [-b] {plg-spec}\f[R]
T}@T{
T}
T{
\f[V]unload [-q] {plg-spec}\f[R]
T}@T{
T}
T{
\f[V]snippet [-f] {url}\f[R]
T}@T{
T}
.TE
.SS Completions
.PP
.TS
tab(@);
cw(16.0n) lw(54.0n).
T{
Command
T}@T{
Description
T}
_
T{
clist [\f[I]columns\f[R]], completions [\f[I]columns\f[R]]
T}@T{
T}
T{
\f[V]cdisable {cname}\f[R]
T}@T{
T}
T{
\f[V]cenable {cname}\f[R]
T}@T{
T}
T{
\f[V]creinstall [-q] [-Q] {plg-spec}\f[R]
T}@T{
T}
T{
\f[V]cuninstall {plg-spec}\f[R]
T}@T{
T}
T{
\f[V]csearch\f[R]
T}@T{
T}
T{
\f[V]compinit\f[R]
T}@T{
T}
T{
\f[V]cclear\f[R]
T}@T{
T}
T{
\f[V]cdlist\f[R]
T}@T{
T}
T{
\f[V]cdreplay [-q]\f[R]
T}@T{
T}
T{
\f[V]cdclear [-q]\f[R]
T}@T{
T}
.TE
.SS Tracking of the Active Session
.PP
.TS
tab(@);
cw(9.2n) lw(60.8n).
T{
Command
T}@T{
Description
T}
_
T{
\f[V]dtrace, dstart\f[R]
T}@T{
T}
T{
\f[V]dstop\f[R]
T}@T{
T}
T{
\f[V]dunload\f[R]
T}@T{
T}
T{
\f[V]dreport\f[R]
T}@T{
T}
T{
\f[V]dclear\f[R]
T}@T{
T}
.TE
.SS Reports and Statistics
.PP
.TS
tab(@);
cw(8.3n) lw(61.7n).
T{
Command
T}@T{
Description
T}
_
T{
\f[V]times [-s] [-m] [-a]\f[R]
T}@T{
T}
T{
\f[V]zstatus\f[R]
T}@T{
T}
T{
\f[V]report {plg-spec}\[rs]|--all\f[R]
T}@T{
T}
T{
\f[V]loaded [keyword], list [keyword]\f[R]
T}@T{
T}
T{
\f[V]ls\f[R]
T}@T{
T}
T{
\f[V]status {plg-spec}\[rs]|URL\[rs]|--all\f[R]
T}@T{
T}
T{
\f[V]recently [time-spec]\f[R]
T}@T{
T}
T{
\f[V]bindkeys\f[R]
T}@T{
T}
.TE
.SS Compiling
.PP
.TS
tab(@);
cw(13.3n) lw(56.7n).
T{
Command
T}@T{
Description
T}
_
T{
\f[V]compile {plg-spec}\[rs]|--all\f[R]
T}@T{
T}
T{
\f[V]uncompile {plg-spec}\[rs]|--all\f[R]
T}@T{
T}
T{
\f[V]compiled\f[R]
T}@T{
T}
.TE
.SS Other
.PP
.TS
tab(@);
cw(10.1n) lw(59.9n).
T{
Command
T}@T{
Description
T}
_
T{
\f[V]self-update\f[R]
T}@T{
T}
T{
\f[V]update [-q] [-r] {plg-spec}\[rs]|URL\[rs]|--all\f[R]
T}@T{
T}
T{
\f[V]ice <ice specification>\f[R]
T}@T{
T}
T{
\f[V]delete {plg-spec}\[rs]|URL\[rs]|--clean\[rs]|--all\f[R]
T}@T{
T}
T{
\f[V]cd {plg-spec}\f[R]
T}@T{
T}
T{
\f[V]edit {plg-spec}\f[R]
T}@T{
T}
.TE
.SS Updating Zinit and Plugins
.PP
To update Zinit issue \f[V]zinit self-update\f[R] in the command line.
.PP
To update all plugins and snippets, issue \f[V]zinit update\f[R].
If you wish to update only a single plugin/snippet instead issue
\f[V]zinit update NAME_OF_PLUGIN\f[R].
A list of commits will be shown:
.PP
Some plugins require performing an action each time they\[cq]re updated.
One way you can do this is by using the \f[V]atpull\f[R] ice modifier.
For example, writing \f[V]zinit ice atpull\[aq]./configure\[aq]\f[R]
before loading a plugin will execute \f[V]./configure\f[R] after a
successful update.
Refer to Ice Modifiers for more information.
.PP
The ice modifiers for any plugin or snippet are stored in their
directory in a \f[V]._zinit\f[R] subdirectory, hence the plugin
doesn\[cq]t have to be loaded to be correctly updated.
There\[cq]s one other file created there, \f[V].zinit_lstupd\f[R] \[en]
it holds the log of the new commits pulled-in in the last update.
.SS Completions
.SS Calling \f[V]compinit\f[R] Without Turbo Mode
.PP
With no Turbo mode in use, compinit can be called normally, i.e.: as
\f[V]autoload compinit; compinit\f[R].
This should be done after loading of all plugins and before possibly
calling \f[V]zinit cdreplay\f[R].
.PP
The \f[V]cdreplay\f[R] subcommand is provided to re-play all catched
\f[V]compdef\f[R] calls.
The \f[V]compdef\f[R] calls are used to define a completion for a
command.
For example, \f[V]compdef _git git\f[R] defines that the \f[V]git\f[R]
command should be completed by a \f[V]_git\f[R] function.
.PP
The \f[V]compdef\f[R] function is provided by \f[V]compinit\f[R] call.
As it should be called later, after loading all of the plugins, Zinit
provides its own \f[V]compdef\f[R] function that catches (i.e.: records
in an array) the arguments of the call, so that the loaded plugins can
freely call \f[V]compdef\f[R].
Then, the \f[V]cdreplay\f[R] (\f[I]compdef-replay\f[R]) can be used,
after \f[V]compinit\f[R] will be called (and the original
\f[V]compdef\f[R] function will become available), to execute all
detected \f[V]compdef\f[R] calls.
To summarize:
.IP
.nf
\f[C]
ZINIT_HOME=\[dq]${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git\[dq]
source \[dq]${ZINIT_HOME}/zinit.zsh\[dq]

zinit load \[dq]some/plugin\[dq]
\&...
compdef _gnu_generic fd  # this will be intercepted by Zinit, because as the compinit
                         # isn\[aq]t yet loaded, thus there\[aq]s no such function \[ga]compdef\[aq]; yet
                         # Zinit provides its own \[ga]compdef\[aq] function which saves the
                         # completion-definition for later possible re-run with \[ga]zinit
                         # cdreplay\[aq] or \[ga]zicdreplay\[aq] (the second one can be used in hooks
                         # like atload\[aq]\[aq], atinit\[aq]\[aq], etc.)
\&...
zinit load \[dq]other/plugin\[dq]

autoload -Uz compinit
compinit

# -q is for quiet; actually run all the \[ga]compdef\[aq]s saved before \[ga]compinit\[ga] call
# (\[ga]compinit\[aq] declares the \[ga]compdef\[aq] function, so it cannot be used until
# \[ga]compinit\[aq] is ran; Zinit solves this via intercepting the \[ga]compdef\[aq]-calls and
# storing them for later use with \[ga]zinit cdreplay\[aq])

zinit cdreplay -q
\f[R]
.fi
.PP
This allows to call compinit once.
Performance gains are huge, example shell startup time with double
\f[V]compinit\f[R]: \f[B]0.980\f[R] sec, with \f[V]cdreplay\f[R] and
single \f[V]compinit\f[R]: \f[B]0.156\f[R] sec.
.SS Calling \f[V]compinit\f[R] With Turbo Mode
.PP
If you load completions using \f[V]wait\[aq]\[aq]\f[R] Turbo mode then
you can add \f[V]atinit\[aq]zicompinit\[aq]\f[R] to syntax-highlighting
plugin (which should be the last one loaded, as their (2 projects,
z-sy-h (https://github.com/zsh-users/zsh-syntax-highlighting) &
f-sy-h (https://github.com/zdharma-continuum/fast-syntax-highlighting))
documentation state), or \f[V]atload\[aq]zicompinit\[aq]\f[R] to last
completion-related plugin.
\f[V]zicompinit\f[R] is a function that just runs
\f[V]autoload compinit; compinit\f[R], created for convenience.
There\[cq]s also \f[V]zicdreplay\f[R] which will replay any caught
compdefs so you can also do:
\f[V]atinit\[aq]zicompinit; zicdreplay\[aq]\f[R], etc.
Basically, the whole topic is the same as normal \f[V]compinit\f[R]
call, but it is done in \f[V]atinit\f[R] or \f[V]atload\f[R] hook of the
last related plugin with use of the helper functions
(\f[V]zicompinit\f[R],\f[V]zicdreplay\f[R] & \f[V]zicdclear\f[R] \[en]
see below for explanation of the last one).
To summarize:
.IP
.nf
\f[C]
ZINIT_HOME=\[dq]${XDG_DATA_HOME:-${HOME}/.local/share/zinit}\[dq]
source \[dq]${ZINIT_HOME}/zinit.zsh\[dq]

# Load using the for-syntax
zinit lucid wait for \[rs]
  \[dq]some/plugin\[dq]

zinit lucid wait for \[rs]
  \[dq]other/plugin\[dq]

zi for \[rs]
    atload\[dq]zicompinit; zicdreplay\[dq] \[rs]
    blockf \[rs]
    lucid \[rs]
    wait \[rs]
  zsh-users/zsh-completions
\f[R]
.fi
.SS Ignoring Compdefs
.PP
If you want to ignore compdefs provided by some plugins or snippets,
place their load commands before commands loading other plugins or
snippets, and issue \f[V]zinit cdclear\f[R] (or \f[V]zicdclear\f[R],
designed to be used in hooks like \f[V]atload\[aq]\[aq]\f[R]):
.IP
.nf
\f[C]
ZINIT_HOME=\[dq]${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git\[dq]
source \[dq]${ZINIT_HOME}/zinit.zsh\[dq]

zi snippet OMZP::git
zi cdclear -q # <- forget completions provided by Git plugin

zi load \[dq]some/plugin\[dq]
\&...
zi load \[dq]other/plugin\[dq]

autoload -Uz compinit
compinit
zi cdreplay -q # <- execute compdefs provided by rest of plugins
zi cdlist # look at gathered compdefs
\f[R]
.fi
.PP
The \f[V]cdreplay\f[R] is important if you use plugins like
\f[V]OMZP::kubectl\f[R] or \f[V]asdf-vm/asdf\f[R], because these plugins
call \f[V]compdef\f[R].
.SS Disabling System-Wide \f[V]compinit\f[R] Call (Ubuntu)
.PP
On Ubuntu users might get surprised that e.g.\ their completions work
while they didn\[cq]t call \f[V]compinit\f[R] in their \f[V].zshrc\f[R].
That\[cq]s because the function is being called in \f[V]/etc/zshrc\f[R].
To disable this call \[en] what is needed to avoid the slowdown and if
user loads any completion-equipped plugins, i.e.\ almost on 100% \[en]
add the following lines to \f[V]\[ti]/.zshenv\f[R]:
.IP
.nf
\f[C]
# Skip the not really helping Ubuntu global compinit
skip_global_compinit=1
\f[R]
.fi
.SS Zinit Module
.PP
The module is now hosted in its own
repository (https://github.com/zdharma-continuum/zinit-module)
.SS Hints and Tips
.SS Customizing Paths
.PP
Following variables can be set to custom values, before sourcing Zinit.
The previous global variables like \f[V]$ZPLG_HOME\f[R] have been
removed to not pollute the namespace \[en] there\[cq]s single
\f[V]$ZINIT\f[R] hash instead of \f[V]8\f[R] string variables.
Please update your dotfiles.
.IP
.nf
\f[C]
declare -A ZINIT  # initial Zinit\[aq]s hash definition, if configuring before loading Zinit, and then:
\f[R]
.fi
.PP
.TS
tab(@);
lw(5.7n) lw(64.3n).
T{
Hash Field
T}@T{
Description
T}
_
T{
ZINIT[BIN_DIR]
T}@T{
Where Zinit code resides, e.g.:
\[lq]\[ti]/.local/share/zinit/zinit.git\[rq]
T}
T{
ZINIT[HOME_DIR]
T}@T{
Where Zinit should create all working directories, e.g.:
\[lq]\[ti]/.local/share/zinit\[rq]
T}
T{
ZINIT[MAN_DIR]
T}@T{
Directory where plugins can store their manpages
(\f[V]atclone\[dq]cp -vf myplugin.1 $ZINIT[MAN_DIR]/man1\[dq]\f[R]).
If overridden, this directory will not necessarily be used by
\f[V]man\f[R] (See #8).
Default: \f[V]$ZPFX/man\f[R]
T}
T{
ZINIT[PLUGINS_DIR]
T}@T{
Override single working directory \[en] for plugins,
e.g.\ \[lq]/opt/zsh/zinit/plugins\[rq]
T}
T{
ZINIT[COMPLETIONS_DIR]
T}@T{
As above, but for completion files,
e.g.\ \[lq]/opt/zsh/zinit/root_completions\[rq]
T}
T{
ZINIT[SNIPPETS_DIR]
T}@T{
As above, but for snippets
T}
T{
ZINIT[LIST_COMMAND]
T}@T{
Command to use for displaying a directory tree (e.g.,
\f[V]ls --tree\f[R], \f[V]tree\f[R], etc.)
T}
T{
ZINIT[ZCOMPDUMP_PATH]
T}@T{
Path to \f[V].zcompdump\f[R] file, with the file included (i.e.\ its
name can be different)
T}
T{
ZINIT[COMPINIT_OPTS]
T}@T{
Options for \f[V]compinit\f[R] call (i.e.\ done by
\f[V]zicompinit\f[R]), use to pass -C to speed up loading
T}
T{
ZINIT[MUTE_WARNINGS]
T}@T{
If set to \f[V]1\f[R], then mutes some of the Zinit warnings,
specifically the \f[V]plugin already registered\f[R] warning
T}
T{
ZINIT[OPTIMIZE_OUT_DISK_ACCESSES]
T}@T{
If set to \f[V]1\f[R], then Zinit will skip checking if a Turbo-loaded
object exists on the disk.
By default Zinit skips Turbo for non-existing objects (plugins or
snippets) to install them before the first prompt \[en] without any
delays, during the normal processing of \f[V]zshrc\f[R].
This option can give a performance gain of about 10 ms out of 150 ms
(i.e.: Zsh will start up in 140 ms instead of 150 ms).
T}
.TE
.PP
There is also \f[V]$ZPFX\f[R], set by default to
\f[V]\[ti]/.local/share/zinit/polaris\f[R] \[en] a directory where
software with \f[V]Makefile\f[R], etc.
can be pointed to, by
e.g.\ \f[V]atclone\[aq]./configure --prefix=$ZPFX\[aq]\f[R].
.SS Non-GitHub (Local) Plugins
.PP
Use \f[V]create\f[R] subcommand with user name \f[V]_local\f[R] (the
default) to create plugin\[cq]s skeleton in
\f[V]$ZINIT[PLUGINS_DIR]\f[R].
It will be not connected with GitHub repository (because of user name
being \f[V]_local\f[R]).
To enter the plugin\[cq]s directory use \f[V]cd\f[R] command with just
plugin\[cq]s name (without \f[V]_local\f[R], it\[cq]s optional).
.PP
If user name will not be \f[V]_local\f[R], then Zinit will create
repository also on GitHub and setup correct repository origin.
.SS Extending Git
.PP
There are several projects that provide git extensions.
Installing them with Zinit has many benefits:
.IP \[bu] 2
all files are under \f[V]$HOME\f[R] \[en] no administrator rights
needed,
.IP \[bu] 2
declarative setup (like Chef or Puppet) \[en] copying \f[V].zshrc\f[R]
to different account brings also git-related setup,
.IP \[bu] 2
easy update by e.g.\ \f[V]zinit update --all\f[R].
.PP
Below is a configuration that adds multiple git extensions, loaded in
Turbo mode, 1 second after prompt, with use of the
Bin-Gem-Node (https://github.com/zdharma-continuum/zinit-annex-bin-gem-node)
annex:
.IP
.nf
\f[C]
zi as\[aq]null\[aq] lucid sbin wait\[aq]1\[aq] for \[rs]
  Fakerr/git-recall \[rs]
  davidosomething/git-my \[rs]
  iwata/git-now \[rs]
  paulirish/git-open \[rs]
  paulirish/git-recent \[rs]
    atload\[aq]export _MENU_THEME=legacy\[aq] \[rs]
  arzzen/git-quick-stats \[rs]
    make\[aq]install\[aq] \[rs]
  tj/git-extras \[rs]
    make\[aq]GITURL_NO_CGITURL=1\[aq] \[rs]
    sbin\[aq]git-url;git-guclone\[aq] \[rs]
  zdharma-continuum/git-url
\f[R]
.fi
.PP
Target directory for installed files is \f[V]$ZPFX\f[R]
(\f[V]\[ti]/.local/share/zinit/polaris\f[R] by default).
.SS Named directories for frequently used paths
.PP
Named directories are shorthands in the form of \f[V]\[ti]NAMED_DIR\f[R]
(upper case not required).
They are setup via \f[V]hash\f[R] command with \f[V]-d\f[R] option, for
example:
.IP
.nf
\f[C]
# Set up a GHUB named directory
hash -d GHUB=\[ti]/github

# Then use as:
cd \[ti]GHUB/my-project

# PWD is now: \[ti]/github/my-project
\f[R]
.fi
.PP
Zinit provides a set of such named directories for its frequently used
paths:
.IP \[bu] 2
\f[I]\[ti]ZIDIR\f[R] \[->] \f[V]$ZINIT[HOME_DIR]\f[R] \[en] the home
directory for others, like \f[V]plugins\f[R], \f[V]snippets\f[R], etc.
.IP \[bu] 2
\f[I]\[ti]ZIPLUGS\f[R] \[->] \f[V]$ZINIT[PLUGINS_DIR]\f[R] \[en] the
\f[V]plugins\f[R] dir,
.IP \[bu] 2
\f[I]\[ti]ZISNIPS\f[R] \[->] \f[V]$ZINIT[SNIPPETS_DIR]\f[R] \[en] the
\f[V]snippets\f[R] dir,
.IP \[bu] 2
\f[I]\[ti]ZICOMPS\f[R] \[->] \f[V]$ZINIT[COMPLETIONS_DIR]\f[R] \[en] the
\f[V]completions\f[R] dir, where all completion functions reside\[ga]
.IP \[bu] 2
\f[I]\[ti]ZISERV\f[R] \[->] \f[V]$ZINIT[SERVICES_DIR]\f[R] \[en] the
\f[V]services\f[R] work dir for all loaded services,
.IP \[bu] 2
\f[I]\[ti]ZICACHE\f[R] \[->] \f[V]$ZSH_CACHE_DIR\f[R] \[en] the cache
dir, usually \f[V]\[ti]/.cache/zinit\f[R],
.IP \[bu] 2
\f[I]\[ti]ZIBIN\f[R] \[->] \f[V]$ZINIT[BIN_DIR]\f[R] \[en] the directory
with Zinit\[cq]s binary scripts,
.IP \[bu] 2
\f[I]\[ti]ZPFX\f[R] \[->] the standard prefix for all
\f[V]configure\f[R] and \f[V]make\f[R] commands, usually
\f[V]\[ti]ZIDIR/polaris\f[R].
.SS Changelog
.PP
Link to the CHANGELOG.
.SS Support
.PP
Zinit is a personal, free-time project with no funding and a huge
feature request
backlog (https://github.com/zdharma-continuum/zinit/issues).
If you love it, consider supporting its development via GitHub Sponsors
[pending].
Any help counts!
.SS Getting Help and Community
.PP
Do you need help or wish to get in touch with other Zinit users?
.IP \[bu] 2
Open a
discussion (https://github.com/zdharma-continuum/zinit/discussions).
.IP \[bu] 2
Or via reach out via Gitter [IMAGE: Join the chat at
https://gitter.im/zdharma-continuum/community (https://badges.gitter.im/zdharma-continuum/zinit.svg)] (https://gitter.im/zdharma-continuum/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
