#!/usr/bin/env zunit

@test 'OMZL::spectrum.zsh' {
   run zinit snippet OMZL::spectrum.zsh

  assert $state equals 0
  assert "$output" contains "Setting up snippet"

  local artifact="$ZINIT[SNIPPETS_DIR]/OMZL::spectrum.zsh/OMZL::spectrum.zsh"
  assert "$artifact" is_file
  assert "$artifact" is_readable
}
@test 'OMZP::git' {
   run zinit snippet OMZP::git

  assert $state equals 0
  assert "$output" contains "Setting up snippet"

  local artifact="$ZINIT[SNIPPETS_DIR]/OMZP::git/OMZP::git"
  assert "$artifact" is_file
  assert "$artifact" is_readable
}
@test 'PZTM::environment' {
   run zinit snippet PZTM::environment

  assert $state equals 0
  assert "$output" contains "Setting up snippet"

  local artifact="$ZINIT[SNIPPETS_DIR]/PZTM::environment/PZTM::environment"
  assert "$artifact" is_file
  assert "$artifact" is_readable
}
@test 'zinit local snippet symlink' {
  mkdir -p "${ZINIT[HOME_DIR]}/external"
  local actual="${ZINIT[HOME_DIR]}/external/mysnippet.zsh"
  cat<<EOF >$actual
alias foo=date
EOF
   run zinit is-snippet link id-as'mysnippet' for $actual

  assert $state equals 0
  assert "$output" contains "Setting up snippet"
  assert "$output" contains "Linking"

  local artifact="${ZINIT[SNIPPETS_DIR]}/mysnippet/mysnippet"
  assert $artifact is_link
  assert $artifact is_readable

  local link="$(readlink "$artifact")"
  local target="$(cd ${artifact:h}; cd ${link:h}; pwd)/${link:t}"
  assert $target same_as $actual
}


# vim:ft=zsh:sw=4:sts=4:et:foldmarker={,}:foldmethod=marker
