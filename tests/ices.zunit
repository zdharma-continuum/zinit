#!/usr/bin/env zunit

@setup {
  load setup
  setup
}

@teardown {
  load teardown
  teardown
}

@test 'sbin ice' {
  run ./scripts/docker-run.sh --wrap --debug --zunit \
    zinit light zdharma-continuum/zinit-annex-bin-gem-node\;\
    zinit light-mode as"null" from"gh-r" sbin'fzf' for junegunn/fzf

  assert $state equals 0
  # We can't assert 'Downloading zdharma-continuum/zinit-annex-bin-gem-node'
  # because of the control chars (colored output)
  assert "$output" contains "Downloading"

  local artifact="${PLUGINS_DIR}/zdharma-continuum---zinit-annex-bin-gem-node/z-a-bin-gem-node.plugin.zsh"
  assert "$artifact" is_file
  assert "$artifact" is_readable

  artifact="${ZPFX}/bin/fzf"
  assert "$artifact" is_file
  assert "$artifact" is_executable
}

@test 'failing atclone ice' {
  local z=$'zinit null atclone'\''echo "intentional failure"; return 69'\'' \
      for zdharma-continuum/null'

  run ./scripts/docker-run.sh --wrap --debug --zunit \
    $z

  assert $state not_equal_to 0
  assert $state equals 69
  assert "$output" contains "intentional failure"
}

@test 'failing atpull ice' {
  local z=$'zinit id-as'\''atpull-fail'\'' null \
      atpull'\''echo "intentional failure"; return 69'\'' \
      run-atpull \
    for zdharma-continuum/null; \
    zi update atpull-fail'

  run ./scripts/docker-run.sh --wrap --debug --zunit \
    $z

  assert $state equals 69
  assert "$output" contains "intentional failure"
}

@test 'failing mv ice' {
  local z=$'zinit as'\''command'\'' from'\''gh-r'\'' bpick'\''*musl*'\'' mv'\''DOES_NOT_EXIST* -> fd'\'' \
      pick'\''fd/fd'\'' for @sharkdp/fd'

  run ./scripts/docker-run.sh --wrap --debug --zunit $z

  assert $state equals 1
  assert "$output" contains "DOES_NOT_EXIST"
  assert "$output" contains "didn't match any file"
}

@test 'mv ice' {
  local z=$'zinit as'\''command'\'' from'\''gh-r'\'' bpick'\''*musl*'\'' mv'\''fd* -> fd'\'' \
      pick'\''fd/fd'\'' for @sharkdp/fd'
  run ./scripts/docker-run.sh --wrap --debug --zunit $z

  assert $state equals 0
  assert "$output" contains "Downloading"

  local artifact="${PLUGINS_DIR}/sharkdp---fd/fd/fd"
  assert "$artifact" is_file
  assert "$artifact" is_readable
  assert "$artifact" is_executable
}

@test 'gh-r ice' {
  local z=$'zinit as'\''command'\'' from'\''gh-r'\'' mv'\''fd* -> fd'\'' pick'\''fd/fd'\'' \
      for @sharkdp/fd'
  run ./scripts/docker-run.sh --wrap --debug --zunit $z

  assert $state equals 0
  assert "$output" contains "Downloading"
  assert "$output" contains "linux"

  local artifact="${PLUGINS_DIR}/sharkdp---fd/fd/fd"
  assert "$artifact" is_file
  assert "$artifact" is_readable
  assert "$artifact" is_executable
}

@test 'incorrect gh-r ice' {
  local z=$'zinit as'\''command'\'' from'\''gh-r'\'' pick'\''**/k9s'\'' \
      for @derailed/k9s'
  run ./scripts/docker-run.sh --wrap --debug --zunit $z

  assert $state equals 0
  assert "$output" does_not_contain "Darwin"
}

# vim: set ft=zsh et ts=2 sw=2 : #
