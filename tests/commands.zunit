#!/usr/bin/env zunit

@setup {
  typeset -gx HOME="$zi_test_dir"
  typeset -gx ZBIN="$zi_test_dir/polaris/bin"
}

@test 'help' {
  for cmd in 'help' '-h' '--help'; do
    run zinit $cmd
    assert $output contains '—— help                          – usage information'
    assert $state equals 0
  done
  run zinit -help
  assert $output contains 'Unknown subcommand'
  assert $state equals 1
}

@test 'delete --help' {
  run zinit delete --help
  assert $output contains 'zinit delete [options] [plugins...]'
  assert $state equals 0
}
@test 'delete --all' {
  run zinit as'completion' is-snippet for @'https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker'
  assert $state equals 0
}
@test 'delete a snippet' {
  run zinit id-as'git.zsh' is-snippet for @'OMZL::git.zsh'
  run zinit delete --yes 'git.zsh'
  assert $state equals 0
}
@test 'delete a plugin' {
    run zinit from'gh-r' as'program' id-as mv'shfmt* -> shfmt' for @'mvdan/sh'
    run zinit delete --yes sh
    assert $state equals 0
}
@test 'delete a program' {
    run zinit as'program' cp'wd.sh->wd' mv'_wd.sh->_wd' pick'wd' completions for @'mfaerevaag/wd'
    assert $state equals 0
    run return ${+commands[wd]}; assert $state equals 0
    run zinit delete --yes mfaerevaag/wd
}

@test 'plugins' {
  run perl -pe 's/\x1b\[[0-9;]*[mG]//g' <(zinit plugins)
  assert $state equals 0
  assert $output contains "==> 5 Plugins"
  assert $output contains 'Loaded: L | Unloaded: U'
}
@test 'plugins with keyword' {
  run perl -pe 's/\x1b\[[0-9;]*[mG]//g' <(zinit plugins zdharma)
  assert $state equals 0
  assert $output contains "==> 4 Plugins matching 'zdharma'"
}

@test 'compile' {
  run zinit light @zdharma-continuum/history-search-multi-word
  run perl -pe 's/\x1b\[[0-9;]*[mG]//g' <(zinit compile zdharma-continuum/history-search-multi-word)
  assert $state equals 0
  assert $output contains "==> Compiling history-search-multi-word.plugin.zsh [OK]"
}
@test 'compile multiple files' {
  run zinit for compile'h*~*zwc' id-as'hsmw-compile-ice' @zdharma-continuum/history-search-multi-word
  run perl -pe 's/\x1b\[[0-9;]*[mG]//g' <(zinit compile hsmw-compile-ice)
  assert $output contains "==> Compiling 4 files history-search-multi-word, history-search-multi-word.plugin.zsh, hsmw-context-main, hsmw-highlight [OK]"
  assert $state equals 0
}
@test 'compile single file' {
  run zinit for id-as'hsmw-no-compile-ice' @zdharma-continuum/history-search-multi-word
  run perl -pe 's/\x1b\[[0-9;]*[mG]//g' <(zinit compile hsmw-no-compile-ice)
  assert $state equals 0
  assert $output contains "==> Compiling history-search-multi-word.plugin.zsh [OK]"
}

@test 'compile command' {
  run zinit for id-as"compile-command" @zdharma-continuum/history-search-multi-word

  run perl -pe 's/\x1b\[[0-9;]*[mG]//g' <(zinit compile --quiet compile-command)
  assert $state equals 0
  assert $output contains "==> Compiling history-search-multi-word.plugin.zsh [OK]"

  run perl -pe 's/\x1b\[[0-9;]*[mG]//g' <(zinit compiled)
  assert $state equals 0
  assert $output contains 'compile-command:'

  run perl -pe 's/\x1b\[[0-9;]*[mG]//g' <(zinit uncompile --quiet compile-command)
  assert $state equals 0; assert $output contains '==> Uncompiling compile-command [OK]'
}

@test 'uncompile --all' {
  zinit uncompile --all --quiet
  run zinit compiled; assert $state equals 0
  assert $output contains 'No compiled plugins'
}

@test 'self-update' {
  run zinit self-update
  assert $output contains 'Already up-to-date.'
  assert $state equals 0
}
@test 'set-debug' {
  ZINIT+=(DEBUG 'true')
  run +zi-log -n '{dbg} message'
  assert $output contains '[debug]'; assert $state equals 0
}
@test 'unset-dbg' {
  run +zi-log -n '{dbg} message'; assert $output contains ''
  run +zi-log -n '{m} message'
  assert $output contains 'message'; assert $state equals 0
}

# vim:ft=zsh:sw=2:sts=2:et:foldmarker={,}:foldmethod=marker
